{"version":3,"sources":["../../../../../../packages/vite/src/executors/build/build.impl.ts"],"sourcesContent":["import 'dotenv/config';\nimport { ExecutorContext } from '@nrwl/devkit';\nimport { build, InlineConfig, mergeConfig } from 'vite';\nimport {\n  getViteBuildOptions,\n  getViteSharedConfig,\n} from '../../utils/options-utils';\nimport { ViteBuildExecutorOptions } from './schema';\nimport { copyAssets } from '@nrwl/js';\nimport { existsSync } from 'fs';\nimport { resolve } from 'path';\nimport { createAsyncIterable } from '@nrwl/devkit/src/utils/async-iterable';\n\nexport default async function* viteBuildExecutor(\n  options: ViteBuildExecutorOptions,\n  context: ExecutorContext\n) {\n  const projectRoot =\n    context.projectsConfigurations.projects[context.projectName].root;\n\n  const buildConfig = mergeConfig(\n    getViteSharedConfig(options, false, context),\n    {\n      build: getViteBuildOptions(options, context),\n    }\n  );\n\n  const watcherOrOutput = await runInstance(buildConfig);\n\n  const libraryPackageJson = resolve(projectRoot, 'package.json');\n  const rootPackageJson = resolve(context.root, 'package.json');\n\n  // For buildable libs, copy package.json if it exists.\n  if (\n    existsSync(libraryPackageJson) &&\n    rootPackageJson !== libraryPackageJson\n  ) {\n    await copyAssets(\n      {\n        outputPath: options.outputPath,\n        assets: [\n          {\n            input: projectRoot,\n            output: '.',\n            glob: 'package.json',\n          },\n        ],\n      },\n      context\n    );\n  }\n\n  if ('on' in watcherOrOutput) {\n    const iterable = createAsyncIterable<{ success: boolean }>(({ next }) => {\n      let success = true;\n      watcherOrOutput.on('event', (event) => {\n        if (event.code === 'START') {\n          success = true;\n        } else if (event.code === 'ERROR') {\n          success = false;\n        } else if (event.code === 'END') {\n          next({ success });\n        }\n        // result must be closed when present.\n        // see https://rollupjs.org/guide/en/#rollupwatch\n        if ('result' in event) {\n          event.result.close();\n        }\n      });\n    });\n    yield* iterable;\n  } else {\n    yield { success: true };\n  }\n}\n\nfunction runInstance(options: InlineConfig) {\n  return build({\n    ...options,\n  });\n}\n"],"names":["viteBuildExecutor","options","context","projectRoot","projectsConfigurations","projects","projectName","root","buildConfig","mergeConfig","getViteSharedConfig","build","getViteBuildOptions","watcherOrOutput","runInstance","libraryPackageJson","resolve","rootPackageJson","existsSync","copyAssets","outputPath","assets","input","output","glob","iterable","createAsyncIterable","next","success","on","event","code","result","close"],"mappings":"AAAA;+BAaA;;aAA+BA;;;QAbxB;sBAE0C;8BAI1C;oBAEoB;oBACA;sBACH;+BACY;AAErB,gBAAgBA,kBAC7BC,OAAiC,EACjCC,OAAwB,EACxB;IACA,MAAMC,cACJD,QAAQE,sBAAsB,CAACC,QAAQ,CAACH,QAAQI,WAAW,CAAC,CAACC,IAAI;IAEnE,MAAMC,cAAcC,IAAAA,iBAAW,EAC7BC,IAAAA,iCAAmB,EAACT,SAAS,KAAK,EAAEC,UACpC;QACES,OAAOC,IAAAA,iCAAmB,EAACX,SAASC;IACtC;IAGF,MAAMW,kBAAkB,MAAMC,YAAYN;IAE1C,MAAMO,qBAAqBC,IAAAA,aAAO,EAACb,aAAa;IAChD,MAAMc,kBAAkBD,IAAAA,aAAO,EAACd,QAAQK,IAAI,EAAE;IAE9C,sDAAsD;IACtD,IACEW,IAAAA,cAAU,EAACH,uBACXE,oBAAoBF,oBACpB;QACA,MAAMI,IAAAA,cAAU,EACd;YACEC,YAAYnB,QAAQmB,UAAU;YAC9BC,QAAQ;gBACN;oBACEC,OAAOnB;oBACPoB,QAAQ;oBACRC,MAAM;gBACR;aACD;QACH,GACAtB;IAEJ,CAAC;IAED,IAAI,QAAQW,iBAAiB;QAC3B,MAAMY,WAAWC,IAAAA,kCAAmB,EAAuB,CAAC,EAAEC,KAAI,EAAE,GAAK;YACvE,IAAIC,UAAU,IAAI;YAClBf,gBAAgBgB,EAAE,CAAC,SAAS,CAACC,QAAU;gBACrC,IAAIA,MAAMC,IAAI,KAAK,SAAS;oBAC1BH,UAAU,IAAI;gBAChB,OAAO,IAAIE,MAAMC,IAAI,KAAK,SAAS;oBACjCH,UAAU,KAAK;gBACjB,OAAO,IAAIE,MAAMC,IAAI,KAAK,OAAO;oBAC/BJ,KAAK;wBAAEC;oBAAQ;gBACjB,CAAC;gBACD,sCAAsC;gBACtC,iDAAiD;gBACjD,IAAI,YAAYE,OAAO;oBACrBA,MAAME,MAAM,CAACC,KAAK;gBACpB,CAAC;YACH;QACF;QACA,OAAOR;IACT,OAAO;QACL,MAAM;YAAEG,SAAS,IAAI;QAAC;IACxB,CAAC;AACH;AAEA,SAASd,YAAYb,OAAqB,EAAE;IAC1C,OAAOU,IAAAA,WAAK,EAAC,aACRV;AAEP"}
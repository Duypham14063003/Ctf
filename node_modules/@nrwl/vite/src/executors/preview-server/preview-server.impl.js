"use strict";
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: ()=>vitePreviewServerExecutor
});
const _extends = require("@swc/helpers/lib/_extends.js").default;
const _devkit = require("@nrwl/devkit");
const _vite = require("vite");
const _optionsUtils = require("../../utils/options-utils");
async function* vitePreviewServerExecutor(options, context) {
    // Retrieve the option for the configured buildTarget.
    const buildTargetOptions = (0, _optionsUtils.getNxTargetOptions)(options.buildTarget, context);
    // Merge the options from the build and preview-serve targets.
    // The latter takes precedence.
    const mergedOptions = _extends({}, {
        watch: {}
    }, buildTargetOptions, options);
    // Retrieve the server configuration.
    const serverConfig = (0, _vite.mergeConfig)((0, _optionsUtils.getViteSharedConfig)(mergedOptions, options.clearScreen, context), {
        build: (0, _optionsUtils.getViteBuildOptions)(mergedOptions, context),
        preview: (0, _optionsUtils.getVitePreviewOptions)(mergedOptions, context)
    });
    if (serverConfig.mode === 'production') {
        console.warn('WARNING: preview is not meant to be run in production!');
    }
    let server;
    const processOnExit = async ()=>{
        await closeServer(server);
        process.off('SIGINT', processOnExit);
        process.off('SIGTERM', processOnExit);
        process.off('exit', processOnExit);
    };
    process.on('SIGINT', processOnExit);
    process.on('SIGTERM', processOnExit);
    process.on('exit', processOnExit);
    // Launch the build target.
    const target = (0, _devkit.parseTargetString)(options.buildTarget, context.projectGraph);
    const build = await (0, _devkit.runExecutor)(target, mergedOptions, context);
    for await (const result of build){
        if (result.success) {
            try {
                if (!server) {
                    server = await (0, _vite.preview)(serverConfig);
                }
                server.printUrls();
                const resolvedUrls = [
                    ...server.resolvedUrls.local,
                    ...server.resolvedUrls.network
                ];
                var ref;
                yield {
                    success: true,
                    baseUrl: (ref = resolvedUrls[0]) != null ? ref : ''
                };
            } catch (e) {
                console.error(e);
                yield {
                    success: false,
                    baseUrl: ''
                };
            }
        } else {
            yield {
                success: false,
                baseUrl: ''
            };
        }
    }
    await new Promise(()=>{});
}
function closeServer(server) {
    return new Promise((resolve)=>{
        if (!server) {
            resolve();
        } else {
            const { httpServer  } = server;
            // closeAllConnections was added in Node v18.2.0
            httpServer.closeAllConnections && httpServer.closeAllConnections();
            httpServer.close(()=>resolve());
        }
    });
}

//# sourceMappingURL=preview-server.impl.js.map